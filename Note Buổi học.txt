----------------------------- Buổi 1 -----------------------------
Frontend Basic:
    HTML
    CSS
    JS

ReactJS:    
    TypeScripts
    JS extra
    ReactJS

Đánh giá cuối học phần:
    Hoàn thành 1 giao diện ReactJS

-- TypeScripts --
    Khai báo 1 biến myName trong JavaScipts:  'daonq' ?
        const myName = "daonq"
        let myName = "daonq"
        var myName = "daonq"
        var myAge = 20

    Khai báo 1 đối tượng student1, có các thuộc tính id=1, name='daonq1', address='HN'
        let student1 = 
            {
                id: 1,
                name: "daonq1",
                address: "HN"
            };
        let student2 = 
            {
                id: 2,
                name: "daonq2",
                address: "HN"
            };

           let student3 = 
            {
                id: 2,
                name_: "daonq2",
                address: "HN"
            };
    JavaScipts != Java
        Java:
            String myName = "daonq"
            int    myAge = 20;
            Class(thuộc tính, phương thức) ==> Instant
    
    JavaScipts:
        Khai báo biến: Không cần định kiểu, kiểu dữ liệu sẽ được tự nhận khi gán giá trị
        Về đối tượng, thì tạo trực tiếp, không cần thông qua Class

    Vấn đề JavaScipts??
    Mong muốn: JavaScipts  ==> TypeScripts
    TypeScripts:
        Chỉ là 1 phiên bản nâng cấp của JavaScipts, hướng tới việc khai báo tường minh về kiểu dữ liệu, hướng tới
            việc sử dụng đối tượng, OOP 1 cách rõ ràng hơn(rất giống Java)
    
        Phục vụ cho người lập trình viên
        Trình duyệt chỉ hiểu: HTML CSS JS
        Cần phải chuyển đổi đoạn mã TypeScripts ==> JavaScipts trước khi chạy trên trình duyệt?
        Demo TS, JS?
            Cách 1:
                .js
                var myName ="daonq",
                console.log(myName)
                Tạo file: index.html
                link file .js vào file index.html
            Cách 2:
                Sử dụng môi trường NodeJS để chạy trực tiếp các file JS
        Cài đặt:
            NodeJS: https://nodejs.org/ 
                    node -v
            npm: Quản lý các gói cài đặt
                    npm -v 
            TypeScripts: npm install -g typescript
                         tsc --version

        Demo chương trình TS đầu tiên
        Kiểu dữ liệu: number, string, boolean, void, undefined, null
        Chạy: 
            Cần chuyển đổi file TS ==> file JS ==> Chạy file JS
            tsc tên_File(tsc .\demo1.ts)  ==> tạo ra 1 file .js
            node .\demo1.js


----------------------------- Buổi 2 -----------------------------
OOP trong TypeScripts
    Class:
        Thuộc Tính
        Phương thức
        Contructor
    Instant: new

    Tính đóng gói: private, getter(), setter()
    Tính kế thừa
    Tính đa hình: Override & Overload
    Tính trừu tượng: abtraction

    Access modifier
        public
        protected
        default
        private

    Demo OOP TypeScripts:
        Xây dựng chương trình để quản lý các bạn học viên ở trong lớp Railway85
        Tạo Person: id, name, address,...
        Tạo ra các Instant: student1, student2,...
        In thông tin các bạn học viên ra màn hình

Export, Import trong JS
    Cách 1: 
        export {a,b,...}
        import {a,b,..} from 'file'
    Cách 2: Sử dụng từ khoá export ngay đầu thành phần cần export
    Cách 3: 
        export default
        import alias from "./tenFile";

Cấu trúc cộng chuỗi trong JS
    VD: "ID: " + person2.id
    Cách khác: Viết theo Template String
        `ID: ${person2.id} Name: ${person2.name} Address: ${person2.address}`

1 Số Tool nên sử dụng
    Format code: Prettier - Code formatter
    Tool TypeScripts: TypeScript Toolbox
        Ctrl + Ship + P

----------------------------- Buổi 3- JavaScipts Mở rộng -----------------------------
1. scope trong JavaScipts
    Global scope: Sau khi khai báo thì được sử dụng trong toàn bộ chương trình
    Function scope (Local scope): Sau khi khai báo chỉ được sử dụng trong phạm hàm
2. var & let & const trong JavaScipts
    var & let: Khai báo biến trong chương trình
        ReDeclare: Khai báo lại
        ReAssign: Gán lại giá trị
        Hosting: Sử dụng 1 biến trước khi khai báo
        var: ReDeclare, Hosting

3. Destructuring: Phá vỡ cấu trúc
    Object
    Mảng

4. Spread ...
    Object
5. Function
    Arrow Function

6. map()

----------------------------- Buổi 4- JavaScipts Mở rộng -----------------------------
1. Higher Order Function HOF: 
    Hàm hoạt động trên các hàm khác
    1 hàm có thể nhận 1 hàm khác làm tham số, và sau khi xử xong thì có thể trả 1 hàm khác
    function(a,b,function()){
        ..
        ..
        ..
        return function()
    }

2. Bất đồng bộ và xử lý bất đồng bộ trong JavaScipts
    Chương trình đồng bộ?
    Callback Hell?
    Promise:
        then
        reject
        resolve
    Demo: Call API Sử dụng promise?